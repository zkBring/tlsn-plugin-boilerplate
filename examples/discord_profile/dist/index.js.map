{
  "version": 3,
  "sources": ["../../../src/utils/hf.js", "../src/index.ts"],
  "sourcesContent": ["function redirect(url) {\n  const { redirect } = Host.getFunctions();\n  const mem = Memory.fromString(url);\n  redirect(mem.offset);\n}\n\nfunction notarize(options) {\n  const { notarize } = Host.getFunctions();\n  const mem = Memory.fromString(JSON.stringify(options));\n  const idOffset = notarize(mem.offset);\n  const id = Memory.find(idOffset).readString();\n  return id;\n}\n\nfunction outputJSON(json) {\n  Host.outputString(\n    JSON.stringify(json),\n  );\n}\n\nfunction getCookiesByHost(hostname) {\n  const cookies = JSON.parse(Config.get('cookies'));\n  if (!cookies[hostname]) throw new Error(`cannot find cookies for ${hostname}`);\n  return cookies[hostname];\n}\n\nfunction getHeadersByHost(hostname) {\n  const headers = JSON.parse(Config.get('headers'));\n  if (!headers[hostname]) throw new Error(`cannot find headers for ${hostname}`);\n  return headers[hostname];\n}\n\nfunction getLocalStorageByHost(hostname) {\n  const localStorage = JSON.parse(Config.get('localStorage'));\n  if (!localStorage[hostname]) throw new Error(`cannot find local storage for ${hostname}`);\n  return localStorage[hostname];\n}\n\nfunction getSessionStorageByHost(hostname) {\n  const sessionStorage = JSON.parse(Config.get('sessionStorage'));\n  if (!sessionStorage[hostname]) throw new Error(`cannot find session storage for ${hostname}`);\n  return sessionStorage[hostname];\n}\n\nmodule.exports = {\n  redirect,\n  notarize,\n  outputJSON,\n  getCookiesByHost,\n  getHeadersByHost,\n  getLocalStorageByHost,\n  getSessionStorageByHost,\n};\n", "import { redirect, notarize, outputJSON, getLocalStorageByHost, getHeadersByHost } from '../../../src/utils/hf';\n\nfunction isValidHost(urlString: string) {\n  const url = new URL(urlString);\n  return url.hostname === 'discord.com' || url.hostname === 'discord.gg'\n}\n\nexport function start() {\n  if (!isValidHost(Config.get('tabUrl'))) {\n    redirect('https://discord.com/channels/@me')\n    outputJSON(false);\n    return;\n  }\n  outputJSON(true);\n}\n\n\nexport function two() {\n  const localStorage = getLocalStorageByHost('discord.com');\n  let userId = localStorage.user_id_cache;\n  userId = userId.replace(/\"/g, \"\");\n  const headers = getHeadersByHost(`discord.com`)\n  console.log(JSON.stringify(headers));\n  console.log(localStorage.user_id_cache);\n  if (\n    !localStorage.user_id_cache ||\n    !headers['Authorization']\n  ) {\n    outputJSON(false);\n    return;\n  }\n  console.log('here');\n  outputJSON({\n    url: `https://discord.com/api/v9/users/${userId}/profile`,\n    method: 'GET',\n    headers: {\n      Host: 'discord.com',\n      Accept: '*/*',\n      'Accept-Encoding': 'identity',\n      'User-Agent': headers['User-Agent'],\n      Authorization: headers['Authorization'],\n      Connection: 'close'\n    },\n    secretHeaders: [\n      `Authorization: ${headers['Authorization']}`\n    ]\n  });\n}\n\nexport function parseDiscordProfile() {\n  const bodyString = Host.inputString();\n  const params = JSON.parse(bodyString);\n\n  if (params.user?.username) {\n    const revealed = JSON.stringify({\n      username: params.user.username,\n      global_name: params.user.global_name,\n    }).slice(1, -1);\n\n    const selectionStart = bodyString.indexOf(revealed);\n    if (selectionStart === -1) {\n      outputJSON([bodyString]);\n      return;\n    }\n\n    const selectionEnd = selectionStart + revealed.length;\n    const secretResps = [\n      bodyString.substring(0, selectionStart),\n      bodyString.substring(selectionEnd),\n    ];\n    outputJSON(secretResps);\n  } else {\n    outputJSON(false);\n  }\n}\n\n\nexport function three() {\n  const params = JSON.parse(Host.inputString());\n\n  if (!params) {\n    outputJSON(false);\n  } else {\n    const id = notarize({\n      ...params,\n      getSecretResponse: 'parseDiscordProfile'\n    })\n    outputJSON(id);\n  }\n}\n\n\n\nexport function config() {\n outputJSON({\n  title: 'Discord Profile',\n      description: 'Notarize your Discord Profile',\n\n      steps: [\n        {\n          title: \"Goto Discord\",\n          description: \"Log in to your discord if you haven't already\",\n          cta: \"Go to discord.com\",\n          action: 'start'\n        },\n        {\n          title: 'Collect credentials',\n          description: \"Check Local Storage for User ID\",\n          cta: 'Check localstorage',\n          action: 'two',\n        },\n        {\n          title: 'Notarize Discord Profile',\n          cta: 'Notarize',\n          action: 'three',\n          prover: true,\n        }\n      ],\n      hostFunctions: ['redirect', 'notarize'],\n      headers: [\n        \"discord.com\",\n        ],\n      localStorage: ['discord.com'],\n      requests: [\n        {\n          url: `https://discord.com/api/v9/users/*/profile`,\n          method: 'GET',\n        },\n      ],\n })\n}\n"],
  "mappings": "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",
  "names": ["module", "redirect", "notarize", "outputJSON", "getHeadersByHost", "getLocalStorageByHost"]
}
